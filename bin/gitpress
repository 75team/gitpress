#!/usr/bin/env node
var http = require('http'),
    httpProxy = require('http-proxy');
var repos;

var PORT = 8361;

if(!process.argv[2]){
	console.log('node gitpress user/repo [template]\n');
	process.exit(0);
}else{
	repos = process.argv[2].split('/');
	if(repos.length <= 1){
		repos.push('blog');
	}
	//console.log(repos);
	//process.exit(0);
	global.gitpressUser = repos[0];
	global.gitpressRepo = repos[1];
}

var tpl = process.argv[3];

var fs = require('fs');

//加载模板
var template_root = __dirname + '/../www/resource/module/';
var templates = ['default', 'slate', 'tactile', 'phase', 'pithiness', 'greyshade'];
var target_root = __dirname + '/../App/View/Home/';

if(tpl && templates.indexOf(tpl) == -1){
	var templateDir = template_root + tpl;
	if(!fs.existsSync(templateDir)){
		console.log('creating template: ' + tpl);
		fs.mkdirSync(templateDir);
		fs.mkdirSync(templateDir + '/css');
		fs.mkdirSync(templateDir + '/js');
		fs.mkdirSync(templateDir + '/img');
	}
	var templateFile = template_root + tpl + '/index.html';
	if(!fs.existsSync(templateFile)){
		var content = '<%= JSON.stringify({'+
				'host: host,'+
				'user: user,'+
			    'repo: repo,'+
				'title: title,'+
				'description: description,'+	
				'resource_url: resource_url,'+
				'avatar: avatar,'+    
			    'template: template,'+
			    'q: q,'+
				'page: page,'+
			    'perpage: perpage,'+
			    'hasNext: hasNext,'+
			    'comment: comment,'+
			    'pageID: pageID,'+
			    'categories: categories,'+
			    'category: category,'+
			    'friends: friends,'+
				'files: files,'+
			    'contents: contents'+
			'}) %>';

		fs.writeFileSync(templateFile, content);
	}
	templates.push(tpl);
}

//process.exit(0);
var errorFile = template_root + 'error.html';

var targetFile = target_root + 'index_error.html';

if(!fs.existsSync(targetFile)){
	console.log('link tplFile:' + targetFile);
	fs.symlinkSync(errorFile, targetFile);
}

templates.forEach(function(tpl){
	var templateFile = template_root + tpl + '/index.html';

	var targetFile = target_root + 'index_' + tpl + '.html';
	if(!fs.existsSync(targetFile)){
		console.log('link tplFile:' + targetFile);
		fs.symlinkSync(templateFile, targetFile);
	}
});

var widgets = target_root + 'widgets';
if(!fs.existsSync(widgets)){
	console.log('link widgetFile:' + widgets);
	fs.symlinkSync(template_root + 'widgets', widgets);	
}

//require('../www/index.js');
global.DEBUG = true;
global.APP_PATH = __dirname + "/../app";

//module.exports = require("thinkjs"); 

/*var exec = require('child_process').exec,
    child;

child = exec('node ../www/index.js',
  function (error, stdout, stderr) {
    console.log('stdout: ' + stdout);
    console.log('stderr: ' + stderr);
    if (error !== null) {
      console.log('exec error: ' + error);
    }
});*/

//
// Create your proxy server
//
httpProxy.createServer(function (req, res, proxy) {
	//
	// Put your custom server logic here
	//
  	var url = require('url').parse(req.url)
  	
  	if(/\.(js|css|gif|jpg|jpeg|png|bmp|swf|ico|woff|map)$/.test(url.pathname)){
	  	var mime = require('mime');
	  	var type = mime.lookup(url.pathname);
	  	var file, devFile, content;

	  	if(url.pathname == '/favicon.ico'){
	  		file = __dirname + '/../www/favicon.ico';
	  	}else{
	  		file = __dirname + '/../www/output' + url.pathname;
	  	}

	  	devFile = __dirname + '/../www/resource/module' + url.pathname;
	  	
	  	//从 output 文件夹取资源文件，如果没有的话，从 source 下取
	  	if(fs.existsSync(file)){
	  		content = fs.readFileSync(file);	
  		}else if(fs.existsSync(devFile)){
	  		content = fs.readFileSync(devFile);
  		}

  		if(content){
 		  	res.writeHead(200, {
			  'Content-Length': content.length,
			  'Content-Type': type 
			});
			res.end(content);  		
  		}else{
  			res.writeHead(404, {'Content-Type': 'text/html'});
  			res.end("{status: 404}");
  		}
  	}else{
		req.headers['proxy-x-gitpress'] = repos.toString();
		if(tpl) req.headers['proxy-x-gitpress-template'] = tpl;
		proxy.proxyRequest(req, res, {
			host: 'localhost',
			port: 8360
		});
	}
}).listen(PORT);


console.log('Compiling documents ...');

http.get("http://127.0.0.1:"+PORT, function(res) {
  	console.log('All compiled! OK~')
	console.log('Proxy run at ' + PORT 
		+ '\nThe repo is:' + repos.join('/'));
}).on('error', function(e) {
	console.log("Got error: " + e.message);
});

